{"version":3,"sources":["Footer.tsx","Component/Card/Cards.tsx","Main.tsx","Component/Sort/SortBars.tsx","Component/Sort/SortAlgorithm.ts","Component/Sort/UtilFunction.ts","Component/Sort/SortView.tsx","Component/Sort/NodeTree.tsx","Component/Sort/HeapSort.tsx","Component/Graph/GraphNodes.tsx","Component/Graph/UtilFunction.ts","Component/Graph/GraphAlgorithm.ts","Component/Graph/GraphView.tsx","Router/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["contributers","index","id","url","Copyright","Typography","variant","color","align","Date","getFullYear","map","contributer","Link","key","href","useStyles","makeStyles","theme","footer","backgroundColor","palette","background","paper","padding","spacing","Footer","classes","className","gutterBottom","component","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","items","name","path","img","desc","Cards","Container","maxWidth","Grid","container","item","xs","sm","md","to","style","textDecoration","Card","CardMedia","image","title","CardContent","mainContent","Main","paragraph","SortBar","graphBars","SortBars","graphBar","bottom","position","width","value","textAlign","border","transform","length","window","innerHeight","WebkitTransition","transition","toString","marginBlockStart","marginBlockEnd","justifyContent","alignItems","mergeSort","list","keyList","arrayLength","process","push","arr","slice","targets","phase","sorted","divide","left","right","mid","Math","floor","listt","i","j","k","temp","l","m","temp2","n","merge","makeRandomList","howSorted","random","tempList","tempBar","increasing","nearlyIncreasing","decreasing","nearlyDecreasing","wholeSortProcess","processLength","sort","sortName","el","insertionSort","min","selectionSort","bubbleSort","quickSort","q","partitionLeft","partitionRight","low","high","pivot","pivotValue","partition","button","margin","playing","speed","initialization","SortView","info","pathName","location","pathname","substr","useState","toggle","setToggle","setBar","undefined","console","log","nowDepth","setNowDepth","nowPlaying","setNowPlaying","setDepth","depth","goTo","changeTo","rendering","makeRandomNumber","stop","play","flexWrap","Button","size","onClick","IconButton","aria-label","flow","setTimeout","NodeTree","graphNodes","graphLength","maxDepth","log2","maxChildCnt","NodeTrees","graphNode","currentDepth","ceil","subDepth","widthInterval","innerWidth","nodeCntInCurDepth","getXPosition","getYPosition","borderRadius","visibility","HSort","makeRandomList2","setNode","heapify","nodes","idx","parent","tIdx","tKey","heapify2","max","heapSort","pop","x","y","sqrt","GraphNodes","graphLines","node","zIndex","lines","line","x1","from","y1","x2","y2","stroke","strokeWidth","stackOrQueue","fontSize","borderStyle","lineHeight","marginBottom","borderLeft","borderRight","borderBottom","makeGraph","density","len","lineKey","nodeList","connected","lineMap","Map","d","randomSet","Set","add","Array","set","concat","search","searchName","visited","visitedNode","visitedLine","targetLine","front","rear","targetNodes","here","hereNode","there","bfs","stack","now","flag","includes","p","dfs","wholeSearchProcess","GraphView","data","setGraphNodes","setGraphLines","setList","NList","LMap","NVisited","LVisited","NTargets","forEach","get","values","Routes","exact","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac4ce13d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Link, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\n\r\n\r\nconst contributers = [\r\n  {\r\n    index: 0,\r\n    id: 'bcking92',\r\n    url: 'https://github.com/bcking92',\r\n  },\r\n  {\r\n    index: 1,\r\n    id: 'sunghyun6',\r\n    url: 'https://github.com/letyousmile',\r\n  },\r\n  {\r\n    index: 2,\r\n    id: 'porori',\r\n    url: 'https://github.com/ckskal3',\r\n  },\r\n];\r\nfunction Copyright(): JSX.Element {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright '}\r\n      {new Date().getFullYear()}\r\n      .\r\n      {contributers.map((contributer) => (\r\n        <Link color=\"inherit\" key={contributer.index} href={contributer.url}>\r\n          {`${contributer.id} `}\r\n        </Link>\r\n      ))}\r\n      All rights reserved.\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\nfunction Footer(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.footer}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n        Algorithm Visualizer\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        서울특별시 강남구 역삼동 테헤란로 212\r\n      </Typography>\r\n      <Copyright />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {\r\n  Card, CardContent, CardMedia, Container, Grid, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst items = [\r\n  {\r\n    index: 0,\r\n    name: '삽입정렬',\r\n    path: '/ISort',\r\n    img: '',\r\n    desc: '자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여,'\r\n    + '자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘입니다.',\r\n  },\r\n  {\r\n    index: 1,\r\n    name: '선택정렬',\r\n    path: '/SSort',\r\n    img: '',\r\n    desc: '주어진 리스트 중에 최소값을 찾습니다. 그 값을 맨 앞에 위치한 값과 교체합니다.'\r\n    + '맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체합니다.',\r\n  },\r\n  {\r\n    index: 2,\r\n    name: '버블정렬',\r\n    path: '/BSort',\r\n    img: '',\r\n    desc: '두 인접한 원소를 검사하여 정렬하는 방법입니다.'\r\n    + '원소의 이동이 거품이 수면으로 올라오는 듯한 모습을 보이기 때문에 지어진 이름입니다.',\r\n  },\r\n  {\r\n    index: 3,\r\n    name: '합병정렬',\r\n    path: '/MSort',\r\n    img: '',\r\n    desc: '분할정복을 이용하여 정렬하는 방법입니다.'\r\n    + '자료 배열을 작은 단위로 쪼개어 정렬하고 합치는 방식으로 작동합니다.',\r\n  },\r\n  {\r\n    index: 4,\r\n    name: '퀵정렬',\r\n    path: '/QSort',\r\n    img: '',\r\n    desc: '퀵이라는 이름에서 알 수 있듯이 평균적인 상황에서 최고의 성능을 나타닙니다.'\r\n    + '피벗을 지정하여 피벗보다 큰 원소는 오른쪽으로, 작은 원소는 왼쪽으로 나누며 정렬해나갑니다.',\r\n  },\r\n  {\r\n    index: 5,\r\n    name: '너비 우선 탐색(BFS, Breath First Search)',\r\n    path: '/bfs',\r\n    img: '',\r\n    desc: '너비너비너비아니'\r\n    + '그랲',\r\n  },\r\n  {\r\n    index: 6,\r\n    name: '깊이 우선 탐색(DFS, Depth First Search)',\r\n    path: '/dfs',\r\n    img: '',\r\n    desc: '기피기피기피'\r\n    + '그랲',\r\n  },\r\n];\r\n\r\nfunction Cards(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n      <Grid container spacing={4}>\r\n        {items.map((item) => (\r\n          <Grid item key={item.index} xs={12} sm={6} md={4}>\r\n            <Link to={item.path} style={{ textDecoration: 'none' }}>\r\n              <Card className={classes.card}>\r\n                <CardMedia\r\n                  className={classes.cardMedia}\r\n                  image=\"https://source.unsplash.com/random\"\r\n                  title=\"Image title\"\r\n                />\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {item.name}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {item.desc}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport {\r\n  Container, Typography, makeStyles,\r\n} from '@material-ui/core/';\r\nimport Cards from './Component/Card/Cards';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n}));\r\n\r\nfunction Main(): JSX.Element {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.mainContent}>\r\n      <Container maxWidth=\"sm\">\r\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n          Alogirhtm Visualizer\r\n        </Typography>\r\n        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n          어려운 알고리즘들을 눈으로 확인해보세요.\r\n        </Typography>\r\n      </Container>\r\n      <Cards />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GraphBar } from '../../util';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction SortBar({ graphBars }: any): JSX.Element {\r\n  const SortBars = graphBars.map((graphBar: GraphBar) => (\r\n    <div\r\n      style={{\r\n        bottom: '500px',\r\n        position: 'absolute',\r\n        width: '50px',\r\n        height: `${(graphBar.value * 20) + 50}px`,\r\n        backgroundColor: graphBar.color,\r\n        textAlign: 'center',\r\n        color: 'black',\r\n        border: '1px solid black',\r\n        transform: `translate(${graphBar.index * 50 - graphBars.length * 25}px, ${(window.innerHeight / 5) * 1.3 + graphBar.height}px)`,\r\n        WebkitTransition: ' -webkit-transform 0.2s',\r\n        transition: 'transform 0.2s',\r\n      }}\r\n      key={graphBar.key.toString()}\r\n    >\r\n      <h1\r\n        style={{\r\n          marginBlockStart: '0',\r\n          marginBlockEnd: '0',\r\n        }}\r\n      >\r\n        {graphBar.value}\r\n      </h1>\r\n    </div>\r\n  ));\r\n  const flex = {\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'flex-end',\r\n  };\r\n  return (\r\n    <div style={flex}>\r\n      {SortBars}\r\n    </div>\r\n  );\r\n}\r\n\r\nSortBar.propTypes = {\r\n  graphBars: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\nexport default SortBar;\r\n","/* eslint-disable no-param-reassign */\r\nimport { GraphBar, Process } from '../../util';\r\n\r\n// 소팅 알고리즘 진행 정도 마다 상태 기억을 위해 [배열, targets, phase]를 저장한다.\r\n// 1. 배열에는 렌더링할 div의 key값을 소팅된 순서대로 저장하고\r\n// 2. targets에는 현재 비교연산중인 index,\r\n// 3. phase에는 소팅 알고리즘이 뭘 하고있는지 저장한다.\r\n// 배열, phase, targets를 토대로 div의 색과 위치를 결정한다.\r\n// phase를 만든 것은 나중에 소팅에 대한 단계별 설명을 쓸 때 확장성있게 사용할 수 있기 때문.\r\nexport function bubbleSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 0; i < arrayLength - 1; i += 1) {\r\n    for (let j = 0; j < arrayLength - i - 1; j += 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, j + 1], phase: 'compare',\r\n      });\r\n      if (list[keyList[j + 1]].value < list[keyList[j]].value) {\r\n        const temp = keyList[j + 1];\r\n        keyList[j + 1] = keyList[j];\r\n        keyList[j] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'change',\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return process;\r\n}\r\nexport function selectionSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 0; i < arrayLength; i += 1) {\r\n    let min = i;\r\n    process.push({\r\n      arr: keyList.slice(), targets: [min, min], phase: 'compare',\r\n    });\r\n    for (let j = i + 1; j < arrayLength; j += 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, min], phase: 'compare',\r\n      });\r\n      if (list[keyList[min]].value > list[keyList[j]].value) {\r\n        process.push({\r\n          arr: keyList.slice(), targets: [min, j], phase: 'compare',\r\n        });\r\n        min = j;\r\n      }\r\n    }\r\n    process.push({\r\n      arr: keyList.slice(), targets: [i, min], phase: 'change',\r\n    });\r\n    [keyList[min], keyList[i]] = [keyList[i], keyList[min]]; // swap\r\n  }\r\n  process.push({\r\n    arr: keyList.slice(), targets: [], phase: 'done',\r\n  });\r\n  return process;\r\n}\r\nexport function insertionSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  for (let i = 1; i < arrayLength; i += 1) {\r\n    for (let j = i - 1; j >= 0; j -= 1) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [j, j + 1], phase: 'insrt-compare',\r\n      });\r\n      if (list[keyList[j + 1]].value < list[keyList[j]].value) {\r\n        const temp = keyList[j + 1];\r\n        keyList[j + 1] = keyList[j];\r\n        keyList[j] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'change',\r\n        });\r\n      } else {\r\n        process.push({\r\n          arr: keyList.slice(), targets: [j, j + 1], phase: 'insert',\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return process;\r\n}\r\nexport function quickSort(list: GraphBar[], keyList: number[],\r\n  left: number, right: number, process: Process[]): Process[] {\r\n  function partition(partitionLeft: number, partitionRight: number): number {\r\n    let low = partitionLeft;\r\n    let high = partitionRight + 1;\r\n    const pivot = partitionLeft;\r\n    const pivotValue = list[keyList[pivot]].value;\r\n    do {\r\n      do {\r\n        low += 1;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [pivot, low, high], phase: 'compare',\r\n        });\r\n      } while (low <= right && list[keyList[low]].value < pivotValue);\r\n      do {\r\n        high -= 1;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [pivot, low, high], phase: 'compare',\r\n        });\r\n      } while (high >= left && list[keyList[high]].value > pivotValue);\r\n      if (low < high) {\r\n        const temp = keyList[low];\r\n        keyList[low] = keyList[high];\r\n        keyList[high] = temp;\r\n        process.push({\r\n          arr: keyList.slice(), targets: [low, high], phase: 'change',\r\n        });\r\n      }\r\n    } while (low < high);\r\n    const temp = keyList[left];\r\n    keyList[left] = keyList[high];\r\n    keyList[high] = temp;\r\n    process.push({\r\n      arr: keyList.slice(), targets: [left, high], phase: 'change',\r\n    });\r\n    return high;\r\n  }\r\n  if (left < right) {\r\n    const q = partition(left, right);\r\n    quickSort(list, keyList, left, q - 1, process);\r\n    quickSort(list, keyList, q + 1, right, process);\r\n  }\r\n  return process;\r\n}\r\n\r\nexport function mergeSort(list: GraphBar[], keyList: number[]): Process[] {\r\n  const arrayLength = keyList.length;\r\n  const process: Process[] = [];\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'start',\r\n  });\r\n  const sorted = keyList.slice();\r\n\r\n  const merge = (listt: number[], left: number, mid: number, right: number): void => {\r\n    let i = left;\r\n    let j = mid + 1;\r\n    let k = left;\r\n    const temp = keyList.slice();\r\n    while (i <= mid && j <= right) {\r\n      if (list[listt[i]].value <= list[listt[j]].value) {\r\n        sorted[k] = listt[i];\r\n        k += 1;\r\n        i += 1;\r\n      } else {\r\n        sorted[k] = listt[j];\r\n        k += 1;\r\n        j += 1;\r\n      }\r\n    }\r\n    if (i > mid) {\r\n      for (let l = j; l <= right; l += 1) {\r\n        sorted[k] = listt[l];\r\n        k += 1;\r\n      }\r\n    } else {\r\n      for (let l = i; l <= mid; l += 1) {\r\n        sorted[k] = listt[l];\r\n        k += 1;\r\n      }\r\n    }\r\n    for (let m = left; m <= right; m += 1) {\r\n      let temp2 = -1;\r\n      for (let n = left; n <= right; n += 1) {\r\n        if (temp[n] === sorted[m]) {\r\n          temp2 = n;\r\n        }\r\n      }\r\n      process.push({\r\n        arr: temp.slice(), targets: [m, temp2], phase: 'merge-down',\r\n      });\r\n    }\r\n    keyList = sorted.slice();\r\n\r\n    process.push({\r\n      arr: keyList.slice(), targets: [left, right], phase: 'merge-up',\r\n    });\r\n  };\r\n\r\n  const divide = (left: number, right: number): void => {\r\n    if (left < right) {\r\n      const mid = Math.floor((left + right) / 2);\r\n      divide(left, mid);\r\n      divide(mid + 1, right);\r\n      merge(keyList, left, mid, right);\r\n    }\r\n  };\r\n  divide(0, arrayLength - 1);\r\n  process.push({\r\n    arr: keyList.slice(), targets: [arrayLength, arrayLength], phase: 'done',\r\n  });\r\n  return process;\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { GraphBar, Process } from '../../util';\r\nimport {\r\n  bubbleSort, selectionSort, insertionSort, quickSort, mergeSort,\r\n} from './SortAlgorithm';\r\n\r\nexport function makeRandomList(howSorted = 'random'): GraphBar[] {\r\n  let list: GraphBar[] = [];\r\n  function random(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < 10; j += 1) {\r\n      const tempBar = {\r\n        key: j, value: Math.floor(Math.random() * 21), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function increasing(): GraphBar[] {\r\n    let k = 0;\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < 10; j += 1) {\r\n      if (j <= 2) {\r\n        k = Math.floor(Math.random() * (6 - k)) + k;\r\n      } else if (j <= 5) {\r\n        k = Math.floor(Math.random() * (11 - k)) + k;\r\n      } else if (j <= 8) {\r\n        k = Math.floor(Math.random() * (16 - k)) + k;\r\n      } else {\r\n        k = Math.floor(Math.random() * (21 - k)) + k;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k, color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function nearlyIncreasing(): GraphBar[] {\r\n    let k = 0;\r\n    const tempList: GraphBar[] = [];\r\n    for (let j = 0; j < 10; j += 1) {\r\n      if (j <= 2) {\r\n        k = Math.floor(Math.random() * (3 - k)) + k;\r\n      } else if (j <= 5) {\r\n        k = Math.floor(Math.random() * (8 - k)) + k;\r\n      } else if (j <= 8) {\r\n        k = Math.floor(Math.random() * (13 - k)) + k;\r\n      } else {\r\n        k = Math.floor(Math.random() * (18 - k)) + k;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k + Math.floor(Math.random() * 4), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function decreasing(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    let k = 21;\r\n    for (let j = 0; j < 10; j += 1) {\r\n      if (j <= 2) {\r\n        k = Math.floor(Math.random() * (k - 16)) + 16;\r\n      } else if (j <= 5) {\r\n        k = Math.floor(Math.random() * (k - 11)) + 11;\r\n      } else if (j <= 8) {\r\n        k = Math.floor(Math.random() * (k - 6)) + 6;\r\n      } else {\r\n        k = Math.floor(Math.random() * (k)) + 0;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k, color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  function nearlyDecreasing(): GraphBar[] {\r\n    const tempList: GraphBar[] = [];\r\n    let k = 18;\r\n    for (let j = 0; j < 10; j += 1) {\r\n      if (j <= 2) {\r\n        k = Math.floor(Math.random() * (k - 15)) + 15;\r\n      } else if (j <= 5) {\r\n        k = Math.floor(Math.random() * (k - 10)) + 10;\r\n      } else if (j <= 8) {\r\n        k = Math.floor(Math.random() * (k - 5)) + 5;\r\n      } else {\r\n        k = Math.floor(Math.random() * (k)) + 0;\r\n      }\r\n      const tempBar = {\r\n        key: j, value: k + Math.floor(Math.random() * 4), color: '#f54141', index: j, sorted: false, height: 0,\r\n      };\r\n      tempList.push(tempBar);\r\n    }\r\n    return tempList;\r\n  }\r\n  switch (howSorted) {\r\n    case 'random':\r\n      list = random();\r\n      break;\r\n    case 'increasing':\r\n      list = increasing();\r\n      break;\r\n    case 'decreasing':\r\n      list = decreasing();\r\n      break;\r\n    case 'nearlyIncreasing':\r\n      list = nearlyIncreasing();\r\n      break;\r\n    case 'nearlyDecreasing':\r\n      list = nearlyDecreasing();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return list;\r\n}\r\n\r\nexport function rendering(list: GraphBar[], process: Process): GraphBar[] {\r\n  // 소팅이 끝났으면 모든 그래프를 초록색으로 변환.\r\n  if (process.phase === 'done') {\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      list[process.arr[i]].color = '#2ee22e';\r\n    }\r\n  } else {\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      if (process.phase !== 'merge-down') {\r\n        // 그래프의 위치 인덱스 변경.\r\n        list[process.arr[i]].index = i;\r\n        // 먼저 막대 빨간색으로 초기화\r\n        list[process.arr[i]].color = '#f54141';\r\n      }\r\n      // 소팅 알고리즘 진행 상황에따라 그래프의 색과 높이 변경.\r\n      if (process.phase === 'change') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[0]\r\n          || list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].color = '#2ee22e';\r\n          if (process.targets[1] === 1) {\r\n            list[process.arr[i]].height = 0;\r\n          }\r\n        }\r\n      } else if (process.phase === 'compare') {\r\n        for (let j = 0; j < process.targets.length; j += 1) {\r\n          if (list[process.arr[i]].index === process.targets[j]) {\r\n            list[process.arr[i]].height = 0;\r\n            list[process.arr[i]].color = '#ff9400';\r\n          }\r\n        }\r\n      } else if (process.phase === 'merge-compare') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        } else if (list[process.arr[i]].index\r\n          === process.targets[0]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'insrt-compare') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].height = 50;\r\n          list[process.arr[i]].color = '#ff9400';\r\n        } else if (list[process.arr[i]].index\r\n          === process.targets[0]) {\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'insert') {\r\n        if (list[process.arr[i]].index\r\n          === process.targets[1]) {\r\n          list[process.arr[i]].height = 0;\r\n        }\r\n      } else if (process.phase === 'merge-up') {\r\n        for (let j = process.targets[0]; j <= process.targets[1]; j += 1) {\r\n          if (list[process.arr[i]].index === j) {\r\n            list[process.arr[i]].height = 0;\r\n            list[process.arr[i]].color = '#2ee22e';\r\n          }\r\n        }\r\n      } else if (process.phase === 'merge-down') {\r\n        if (list[process.arr[i]].index === process.targets[1]\r\n          && list[process.arr[i]].height === 0) {\r\n          const changeTo = process.targets[0];\r\n          list[process.arr[i]].index = changeTo;\r\n          list[process.arr[i]].height = 50;\r\n          list[process.arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process.phase === 'start') {\r\n        for (let j = 0; j < list.length; j += 1) {\r\n          list[process.arr[j]].height = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return list.slice();\r\n}\r\nexport const sort = (list: GraphBar[], sortName: string): Process[] => {\r\n  const keyList = list.map((el) => el.key);\r\n  let process: Process[] = [];\r\n  switch (sortName) {\r\n    case 'ISort':\r\n      process = insertionSort(list, keyList);\r\n      break;\r\n    case 'SSort':\r\n      process = selectionSort(list, keyList);\r\n      break;\r\n    case 'BSort':\r\n      process = bubbleSort(list, keyList);\r\n      break;\r\n    case 'QSort':\r\n      process = quickSort(list, keyList, 0, list.length - 1, process);\r\n      break;\r\n    case 'MSort':\r\n      process = mergeSort(list, keyList);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  process.push({\r\n    arr: keyList.slice(), targets: [], phase: 'done',\r\n  });\r\n  return process;\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SortBars from './SortBars';\r\nimport { GraphBar, Process } from '../../util';\r\nimport { makeRandomList, sort, rendering } from './UtilFunction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n// speed와 playing을 전역변수로 만든 이유는 함수안에서 선언하면 클로져 때문에 값을 도중에 바꿀 수가 없기 때문.\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\n// 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\nlet wholeSortProcess: Process[];\r\n// 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\nlet processLength: number;\r\nlet initialization = false;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction SortView(info: any): JSX.Element {\r\n  const pathName = info.location.pathname.substr(1);\r\n  const classes = useStyles();\r\n  const [toggle, setToggle] = useState(false);\r\n  // 리스트 초기 변수\r\n  const [graphBars, setBar] = useState<GraphBar[]>(makeRandomList());\r\n\r\n  if (graphBars !== undefined) {\r\n    if (initialization) {\r\n      console.log('정렬다시함');\r\n      wholeSortProcess = sort(graphBars, pathName);\r\n      processLength = wholeSortProcess.length;\r\n    }\r\n  }\r\n\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    initialization = false;\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      console.log(processLength);\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        setBar(rendering(graphBars, wholeSortProcess[depth]));\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(howSorted = 'random'): void {\r\n    const temp: GraphBar[] = makeRandomList(howSorted);\r\n    console.log(temp);\r\n    setBar(temp);\r\n    setDepth(0);\r\n    initialization = true;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n    initialization = false;\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    if (processLength === undefined) {\r\n      wholeSortProcess = sort(graphBars, pathName);\r\n      processLength = wholeSortProcess.length;\r\n    }\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n  // 다른 화면으로 넘어갈 때는 초기화\r\n  if (!playing) {\r\n    initialization = true;\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      height: '700px',\r\n    }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); initialization = true; } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); initialization = true; } else { stop(); initialization = true; } }}>\r\n          {(!nowPlaying || initialization)\r\n            && <PlayArrowIcon />}\r\n          {(nowPlaying && !initialization)\r\n            && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        {!toggle && <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!toggle) { setToggle(true); } else { setToggle(false); } }}>배열생성</Button>}\r\n        {toggle\r\n          && (\r\n            <div>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber(); stop(); }}>난수배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('increasing'); stop(); }}>증가배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('decreasing'); stop(); }}>감소배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('nearlyIncreasing'); stop(); }}>상승세배열</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('nearlyDecreasing'); stop(); }}>하강세배열</Button>\r\n            </div>\r\n          )}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        <SortBars graphBars={graphBars} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GraphNode } from '../../util';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction NodeTree({ graphNodes }: any): JSX.Element {\r\n  const graphLength = graphNodes.length;\r\n  const maxDepth = Math.floor(Math.log2(graphLength));\r\n  const maxChildCnt = maxDepth ** 2;\r\n  const NodeTrees = graphNodes.map((graphNode: GraphNode) => {\r\n    const currentDepth = (Math.ceil(Math.log2(graphNode.index + 2)) - 1);\r\n    const subDepth = maxDepth - currentDepth;\r\n    const widthInterval = 2 ** subDepth * (window.innerWidth / (maxChildCnt + 10));\r\n    const nodeCntInCurDepth = 2 ** currentDepth;\r\n    const positionInCurDepth = (graphNode.index + 1) - nodeCntInCurDepth;\r\n    const getXPosition = positionInCurDepth * widthInterval - (widthInterval / 2) * (nodeCntInCurDepth - 1) - 25;\r\n    const getYPosition = currentDepth * 100 + 100;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          width: '50px',\r\n          height: '50px',\r\n          backgroundColor: graphNode.color,\r\n          textAlign: 'center',\r\n          color: 'black',\r\n          border: '1px solid black',\r\n          borderRadius: '25px',\r\n          transform: `translate(${getXPosition}px, ${getYPosition}px)`,\r\n          WebkitTransition: ' -webkit-transform 0.1s',\r\n          transition: 'transform 0.1s',\r\n          visibility: graphNode.display === 'visible' || graphNode.display === undefined ? 'visible' : 'hidden',\r\n        }}\r\n        key={graphNode.key.toString()}\r\n      >\r\n        <h1\r\n          style={{\r\n            marginBlockStart: '0',\r\n            marginBlockEnd: '0',\r\n          }}\r\n        >\r\n          {graphNode.value}\r\n        </h1>\r\n      </div>\r\n    );\r\n  });\r\n  const flex = {\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'flex-end',\r\n  };\r\n  return (\r\n    <div style={flex}>\r\n      {NodeTrees}\r\n    </div>\r\n  );\r\n}\r\n\r\nNodeTree.propTypes = {\r\n  graphNodes: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\nexport default NodeTree;\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport { Process, GraphNode } from '../../util';\r\nimport NodeTree from './NodeTree';\r\n\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\nfunction HSort(): JSX.Element {\r\n  function makeRandomList2(): GraphNode[] {\r\n    const list: GraphNode[] = [];\r\n    for (let j = 0; j < 31; j += 1) {\r\n      const tempBar = {\r\n        key: j, value: Math.floor(Math.random() * 21), color: '#f54141', index: j, sorted: false, display: 'hidden',\r\n      };\r\n      list.push(tempBar);\r\n    }\r\n    return list;\r\n  }\r\n  // 리스트 초기 변수\r\n  const [graphNodes, setNode] = useState<GraphNode[]>(makeRandomList2);\r\n\r\n  // heapSort();\r\n  function heapify(nodes: GraphNode[], keyList: number[], idx: number, process: Process[]): number[] {\r\n    let parent = Math.floor((idx - 1) / 2);\r\n    let tIdx = idx;\r\n    const tKey = keyList.slice();\r\n    while (tIdx > 0 && parent > -1) {\r\n      process.push({\r\n        arr: tKey.slice(), targets: [tIdx, parent], phase: 'compare',\r\n      });\r\n      if (nodes[tKey[parent]].value < nodes[tKey[tIdx]].value) {\r\n        process.push({\r\n          arr: tKey.slice(), targets: [parent, tIdx], phase: 'change',\r\n        });\r\n        [tKey[parent], tKey[tIdx]] = [tKey[tIdx], tKey[parent]];\r\n        tIdx = parent;\r\n        parent = Math.floor((tIdx - 1) / 2);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return tKey;\r\n  }\r\n  function heapify2(nodes: GraphNode[], keyList: number[], process: Process[]): number[] {\r\n    const tKey = keyList.slice();\r\n    let idx = 0;\r\n    let left = idx * 2 + 1;\r\n    let right = idx * 2 + 2;\r\n\r\n    while (left < tKey.length) {\r\n      if (right < tKey.length) { // 자식이 둘다 존재\r\n        const max = nodes[tKey[left]].value > nodes[tKey[right]].value ? left : right;\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, max], phase: 'compare',\r\n        });\r\n        if (nodes[tKey[idx]].value >= nodes[tKey[max]].value) {\r\n          break;\r\n        }\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, max], phase: 'change',\r\n        });\r\n        [tKey[idx], tKey[max]] = [tKey[max], tKey[idx]];\r\n        idx = max;\r\n        left = idx * 2 + 1;\r\n        right = idx * 2 + 2;\r\n      } else { // 자식이 좌측만 존재\r\n        process.push({\r\n          arr: tKey.slice(), targets: [idx, left], phase: 'compare',\r\n        });\r\n        if (nodes[tKey[idx]].value < nodes[tKey[left]].value) {\r\n          process.push({\r\n            arr: tKey.slice(), targets: [idx, left], phase: 'compare',\r\n          });\r\n          [tKey[idx], tKey[left]] = [tKey[left], tKey[idx]];\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return tKey;\r\n  }\r\n\r\n  function heapSort(nodes: GraphNode[]): Process[] {\r\n    // 부모노드와 비교 해서 자신이 크면 바꿈\r\n    // 자신의 자식노드 중 큰 노드가 자신보다 크면 변경\r\n    // 변경후 다시 자식노드들과 비교해서 큰 노드가 있다면 다시 변경\r\n    // 최상단까지 진행\r\n    let keyList: number[] = [];\r\n    const arrayLength = nodes.length;\r\n    const process: Process[] = [];\r\n    process.push({\r\n      arr: keyList.slice(), targets: [0, 0], phase: 'insert',\r\n    });\r\n\r\n    for (let i = 0; i < arrayLength; i += 1) {\r\n      keyList.push(nodes[i].key);\r\n      process.push({\r\n        arr: keyList.slice(), targets: [i, i], phase: 'insert',\r\n      });\r\n      keyList = heapify(nodes, keyList, i, process).slice();\r\n    }\r\n\r\n    while (keyList.length > 0) {\r\n      process.push({\r\n        arr: keyList.slice(), targets: [0, keyList.length - 1], phase: 'change',\r\n      });\r\n      [keyList[0], keyList[keyList.length - 1]] = [keyList[keyList.length - 1], keyList[0]];\r\n      process.push({\r\n        arr: keyList.slice(), targets: [keyList.length - 1, keyList.length - 1], phase: 'remove',\r\n      });\r\n      keyList.pop();\r\n      keyList = heapify2(nodes, keyList, process).slice();\r\n    }\r\n\r\n    return process;\r\n  }\r\n\r\n  function rendering(list: GraphNode[], process: Process[], depth: number): GraphNode[] {\r\n    // const tList = [...list];\r\n    // console.log('tList', list);\r\n    // console.log('process', process);\r\n    // 소팅이 끝났으면 모든 그래프를 초록색으로 변환.\r\n    console.log(process[depth]);\r\n    for (let i = 0; i < list.length; i += 1) {\r\n      list[i].display = 'hidden';\r\n    }\r\n    for (let i = 0; i < process[depth].arr.length; i += 1) {\r\n      list[process[depth].arr[i]].display = 'visible';\r\n      // 먼저 막대 빨간색으로 초기화\r\n      list[process[depth].arr[i]].color = '#f54141';\r\n      // 그래프의 위치 인덱스 변경.\r\n      list[process[depth].arr[i]].index = i;\r\n      // 소팅 알고리즘 진행 상황에따라 그래프의 색과 높이 변경.\r\n      if (process[depth].phase === 'change') {\r\n        if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[0]\r\n                    || list[process[depth].arr[i]].index\r\n                    === process[depth].targets[1]) {\r\n          list[process[depth].arr[i]].color = '#2ee22e';\r\n        }\r\n      } else if (process[depth].phase === 'compare') {\r\n        if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[1]) {\r\n          list[process[depth].arr[i]].color = '#ff9400';\r\n        } else if (list[process[depth].arr[i]].index\r\n                    === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].color = '#ff9400';\r\n        }\r\n      } else if (process[depth].phase === 'insert') {\r\n        if (list[process[depth].arr[i]].index\r\n          === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].display = 'visible';\r\n        }\r\n      } else if (process[depth].phase === 'remove') {\r\n        if (list[process[depth].arr[i]].index\r\n          === process[depth].targets[0]) {\r\n          list[process[depth].arr[i]].display = 'hidden';\r\n        }\r\n      }\r\n    }\r\n\r\n    return list.slice();\r\n  }\r\n\r\n  // 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  let wholeSortProcess: Process[] = heapSort(graphNodes);\r\n  // 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\n  let processLength = wholeSortProcess.length;\r\n  // 소팅 알고리즘의 현재 진행 정도를 저장하는 함수.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        setNode(rendering(graphNodes, wholeSortProcess, depth));\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(): void {\r\n    const temp: GraphNode[] = makeRandomList2();\r\n    setNode(temp);\r\n    setDepth(0);\r\n    wholeSortProcess = heapSort(temp);\r\n    processLength = wholeSortProcess.length;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{\r\n      height: '700px',\r\n    }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); } else { stop(); } }}>\r\n          {!nowPlaying\r\n           && <PlayArrowIcon />}\r\n          {nowPlaying\r\n           && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { makeRandomNumber(); stop(); }}>초기화 하기</Button>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className=\"hSortButton\" size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        <NodeTree graphNodes={graphNodes} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HSort;\r\n","import React from 'react';\r\nimport { Node, Line } from '../../util';\r\n\r\nfunction x(key: number): number {\r\n  return (400 + 100 * Math.floor(key / 2));\r\n}\r\nfunction y(key: number): number {\r\n  return (200 + ((-1) ** Math.ceil(key / 2)) * 50 + ((-1) ** Math.ceil(key / 2))\r\n  * (Math.sqrt(40000 - ((100 * Math.floor(key / 2) - 200) ** 2)) / 1.5));\r\n}\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction GraphNodes({ graphNodes, graphLines, list }: any): JSX.Element {\r\n  const nodes = graphNodes.map((node: Node) => (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        borderRadius: '50px',\r\n        border: '2px solid black',\r\n        height: '50px',\r\n        width: '50px',\r\n        backgroundColor: node.color,\r\n        transform: `translate(${x(node.key)}px, ${y(node.key)}px)`,\r\n        zIndex: 100,\r\n      }}\r\n      key={node.key}\r\n    >\r\n      <p\r\n        style={{\r\n          color: 'black',\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        {node.key}\r\n      </p>\r\n    </div>\r\n  ));\r\n  const lines = graphLines.map((line: Line) => (\r\n    <line\r\n      x1={`${x(line.from) + 25}`}\r\n      y1={`${y(line.from) + 25}`}\r\n      x2={`${x(line.to) + 25}`}\r\n      y2={`${y(line.to) + 25}`}\r\n      style={{\r\n        stroke: line.color,\r\n        strokeWidth: 2,\r\n        zIndex: 1,\r\n      }}\r\n      key={line.key}\r\n    />\r\n  ));\r\n  const stackOrQueue = list.map((node: number) => (\r\n    <div\r\n      style={{\r\n        width: '50px',\r\n        height: '50px',\r\n        borderRadius: '10px',\r\n        fontSize: '40px',\r\n        color: 'black',\r\n        border: '2px solid black',\r\n        borderStyle: 'dashed',\r\n        textAlign: 'center',\r\n        lineHeight: '40px',\r\n        marginBottom: '5px',\r\n        WebkitTransition: ' -webkit-transform 0.2s opacity 0.2s',\r\n        transition: 'transform 0.2s opacity 0.2s',\r\n      }}\r\n      key={node}\r\n    >\r\n      {node}\r\n    </div>\r\n  ));\r\n  return (\r\n    <div>\r\n      {nodes}\r\n      <div style={{\r\n        display: 'flex',\r\n        height: '400px',\r\n        width: '70px',\r\n        borderLeft: '2px solid black',\r\n        borderRight: '2px solid black',\r\n        borderBottom: '2px solid black',\r\n        position: 'absolute',\r\n        transform: 'translate(1000px, 30px)',\r\n        flexDirection: 'column-reverse',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n      }}\r\n      >\r\n        {stackOrQueue}\r\n      </div>\r\n      <svg height=\"900\" width=\"1600\">\r\n        {lines}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default GraphNodes;\r\n","import { Node, Line, GProcess } from '../../util';\r\nimport { bfs, dfs } from './GraphAlgorithm';\r\n\r\nexport function makeGraph(density = 'normal'): [Node[], Map<string, Line>] {\r\n  const len = 10;\r\n  let lineKey = 0;\r\n  const nodeList: Node[] = [];\r\n  for (let i = 0; i < len; i += 1) {\r\n    const node: Node = {\r\n      key: i, connected: [], color: 'grey',\r\n    };\r\n    nodeList.push(node);\r\n  }\r\n  const lineMap = new Map<string, Line>();\r\n  let d = len / 3;\r\n  if (density === 'low') {\r\n    d = len / 5;\r\n  } else if (density === 'high') {\r\n    d = len / 2;\r\n  }\r\n  for (let i = 0; i < len - 1; i += 1) {\r\n    if (nodeList[i].connected.length >= d) break;\r\n    const randomSet = new Set<number>();\r\n    for (let j = 0; j < d - nodeList[i].connected.length; j += 1) {\r\n      randomSet.add(Math.floor(Math.random() * (len - i - 1) + i + 1));\r\n    }\r\n    const tempList = Array.from(randomSet).sort();\r\n    for (let j = 0; j < tempList.length; j += 1) {\r\n      nodeList[i].connected.push(tempList[j]);\r\n      nodeList[tempList[j]].connected.push(i);\r\n    }\r\n    for (let j = 0; j < tempList.length; j += 1) {\r\n      const line: Line = {\r\n        key: lineKey, from: i, to: tempList[j], color: 'black',\r\n      };\r\n      lineMap.set(i.toString().concat('to').concat(tempList[j].toString()), line);\r\n      lineKey += 1;\r\n    }\r\n  }\r\n  return [nodeList, lineMap];\r\n}\r\nexport const search = (nodeList: Node[], searchName: string): GProcess[] => {\r\n  let process: GProcess[] = [];\r\n  switch (searchName) {\r\n    case 'bfs':\r\n      process = bfs(nodeList);\r\n      break;\r\n    case 'dfs':\r\n      process = dfs(nodeList);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return process;\r\n};\r\nexport function rendering(nodeList: Node[], lineMap: Map<string, Line>, process: GProcess):\r\n[Node[], Map<string, Line>] {\r\n  const NList = nodeList.slice();\r\n  const LMap = lineMap;\r\n  const NVisited = process.visitedNode;\r\n  const LVisited = process.visitedLine;\r\n  const NTargets = process.targetNodes;\r\n  // 단계를 위한 초기화\r\n  for (let i = 0; i < NList.length; i += 1) {\r\n    NList[i].color = 'grey';\r\n  }\r\n  LMap.forEach((value, key) => {\r\n    const line = LMap.get(key);\r\n    if (line !== undefined) {\r\n      line.color = 'black';\r\n      LMap.set(key, line);\r\n    }\r\n  });\r\n  // 이미 방문된 것들 색 바꿔주기\r\n  for (let i = 0; i < NVisited.length; i += 1) {\r\n    NList[NVisited[i]].color = '#2ee22e';\r\n  }\r\n  for (let i = 0; i < LVisited.length; i += 1) {\r\n    const line = LMap.get(LVisited[i]);\r\n    if (line !== undefined) {\r\n      line.color = '#2ee22e';\r\n      LMap.set(LVisited[i], line);\r\n    }\r\n  }\r\n  // 지금 방문한 거 색 바꾸기\r\n  if (process.phase === 'visit') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n      NList[NTargets[1]].color = 'yellow';\r\n    }\r\n  }\r\n  if (process.phase === 'pop') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n    }\r\n  }\r\n  if (process.phase === 'afterVisit') {\r\n    if (NTargets.length > 0) {\r\n      NList[NTargets[0]].color = 'orange';\r\n    }\r\n  }\r\n  const line = LMap.get(process.targetLine);\r\n  if (line !== undefined) {\r\n    line.color = '#ff9400';\r\n    LMap.set(process.targetLine, line);\r\n  }\r\n  return [NList.slice(), LMap];\r\n}\r\n","import { Node, GProcess } from '../../util';\r\n\r\nexport function bfs(nodeList: Node[]): GProcess[] {\r\n  const visited: boolean[] = new Array<false>(10);\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [0];\r\n  const visitedLine: string[] = [];\r\n  const q: number[] = new Array<number>(10);\r\n  let targetLine = '';\r\n  const start = 0;\r\n  let front = -1;\r\n  let rear = -1;\r\n  rear += 1;\r\n  q[rear] = start;\r\n  visited[0] = true;\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'start',\r\n    list: q.slice(),\r\n  });\r\n  while (front !== rear) {\r\n    front += 1;\r\n    const here = q[front];\r\n    const hereNode = nodeList[here];\r\n    for (let i = 0; i < hereNode.connected.length; i += 1) {\r\n      const there = hereNode.connected[i];\r\n      if (!visited[there]) {\r\n        visited[there] = true;\r\n        rear += 1;\r\n        q[rear] = there;\r\n        visitedNode.push(there);\r\n        const from = here < there ? here.toString() : there.toString();\r\n        const to = here > there ? here.toString() : there.toString();\r\n        targetLine = from.concat('to').concat(to);\r\n        visitedLine.push(targetLine);\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [here, there],\r\n          targetLine,\r\n          phase: 'visit',\r\n          list: q.slice(),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode,\r\n    visitedLine,\r\n    targetNodes: [],\r\n    targetLine: '',\r\n    phase: 'done',\r\n    list: q.slice(),\r\n  });\r\n  return process;\r\n}\r\n\r\nexport function dfs(nodeList: Node[]): GProcess[] {\r\n  const process: GProcess[] = [];\r\n  const visitedNode: number[] = [0];\r\n  const visitedLine: string[] = [];\r\n  let targetLine = '';\r\n  const stack: number[][] = [];\r\n  stack.push([0, 0]);\r\n  // visited.push(0);\r\n  // process.push({\r\n  //   visitedNode: visitedNode.slice(),\r\n  //   visitedLine: visitedLine.slice(),\r\n  //   targetNodes: [],\r\n  //   targetLine,\r\n  //   phase: 'start',\r\n  //   list: stack.map((el) => el[1]),\r\n  // });\r\n  // let nowFromTo = stack.pop();\r\n  // if (nowFromTo !== undefined) {\r\n  //   const now = nowFromTo[0];\r\n  //   visitedNode.push(now);\r\n  //   for (let i = 0; i < nodeList[now].connected.length; i += 1) {\r\n  //     stack.push([now, nodeList[now].connected[i]]);\r\n  // process.push({\r\n  //   visitedNode: visitedNode.slice(),\r\n  //   visitedLine: visitedLine.slice(),\r\n  //   targetNodes: [0, nodeList[now].connected[i]],\r\n  //   targetLine,\r\n  //   phase: 'push',\r\n  //   list: stack.map((el) => el[1]),\r\n  // });\r\n  //   }\r\n  // }\r\n  visitedNode.push(0);\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [],\r\n    targetLine,\r\n    phase: 'visit',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  let now = 0;\r\n  while (stack.length > 0) {\r\n    let flag = true;\r\n    const hereNode = nodeList[now];\r\n    for (let i = 0; i < hereNode.connected.length; i += 1) {\r\n      if (!visitedNode.includes(hereNode.connected[i])) {\r\n        targetLine = now < hereNode.connected[i] ? `${now}to${hereNode.connected[i]}` : `${hereNode.connected[i]}to${now}`;\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, hereNode.connected[i]],\r\n          targetLine,\r\n          phase: 'visit',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n        targetLine = '';\r\n        stack.push([now, hereNode.connected[i]]);\r\n        visitedNode.push(hereNode.connected[i]);\r\n        visitedLine.push(targetLine);\r\n        now = hereNode.connected[i];\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, now],\r\n          targetLine,\r\n          phase: 'afterVisit',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n        flag = false;\r\n        break;\r\n      }\r\n    }\r\n    if (flag) {\r\n      const p = stack.pop();\r\n      if (p !== undefined) {\r\n        const temp = p[0];\r\n        now = temp;\r\n        process.push({\r\n          visitedNode: visitedNode.slice(),\r\n          visitedLine: visitedLine.slice(),\r\n          targetNodes: [now, now],\r\n          targetLine,\r\n          phase: 'pop',\r\n          list: stack.map((el) => el[1]),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  process.push({\r\n    visitedNode: visitedNode.slice(),\r\n    visitedLine: visitedLine.slice(),\r\n    targetNodes: [now, now],\r\n    targetLine,\r\n    phase: 'done',\r\n    list: stack.map((el) => el[1]),\r\n  });\r\n  // nowFromTo = stack.pop();\r\n  // process.push({\r\n  //   visitedNode: visitedNode.slice(),\r\n  //   visitedLine: visitedLine.slice(),\r\n  //   targetNodes: [],\r\n  //   targetLine,\r\n  //   phase: 'pop',\r\n  //   list: stack.map((el) => el[1]),\r\n  // });\r\n  //   if (nowFromTo !== undefined) {\r\n  //     const nowFrom = nowFromTo[0];\r\n  //     const nowTo = nowFromTo[1];\r\n  //     visitedNode.push(nowTo);\r\n  //     targetLine = nowFrom < nowTo ? `${nowFrom}to${nowTo}` : `${nowTo}to${nowFrom}`;\r\n  //     visitedLine.push(targetLine);\r\n  //     process.push({\r\n  //       visitedNode: visitedNode.slice(),\r\n  //       visitedLine: visitedLine.slice(),\r\n  //       targetNodes: [nowFrom, nowTo],\r\n  //       targetLine,\r\n  //       phase: 'visit',\r\n  //       list: stack.map((el) => el[1]),\r\n  //     });\r\n  //     const hereNode = nodeList[nowTo];\r\n  //     for (let j = 0; j < hereNode.connected.length; j += 1) {\r\n  //       if (!visited.includes(hereNode.connected[j])) {\r\n  //         stack.push([nowTo, hereNode.connected[j]]);\r\n  //         visited.push(hereNode.connected[j]);\r\n  //         process.push({\r\n  //           visitedNode: visitedNode.slice(),\r\n  //           visitedLine: visitedLine.slice(),\r\n  //           targetNodes: [nowFrom, nowTo],\r\n  //           targetLine,\r\n  //           phase: 'push',\r\n  //           list: stack.map((el) => el[1]),\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n  // process.push({\r\n  //   visitedNode: visitedNode.slice(),\r\n  //   visitedLine: visitedLine.slice(),\r\n  //   targetNodes: [],\r\n  //   targetLine,\r\n  //   phase: 'done',\r\n  //   list: stack.map((el) => el[1]),\r\n  // });\r\n  return process;\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\n\r\nimport GraphNodes from './GraphNodes';\r\nimport { Node, Line, GProcess } from '../../util';\r\nimport { makeGraph, rendering, search } from './UtilFunction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n// speed와 playing을 전역변수로 만든 이유는 함수안에서 선언하면 클로져 때문에 값을 도중에 바꿀 수가 없기 때문.\r\nlet playing = false;\r\nlet speed = 1000;\r\n\r\n// 소팅 알고리즘의 현재 진행 정도를 저장해 놓는 변수.\r\nlet wholeSearchProcess: GProcess[];\r\n// 소팅 알고리즘 상태를 기억하는 배열의 길이 변수화.\r\nlet processLength: number;\r\nlet initialization = false;\r\n\r\nfunction GraphView(info: any): JSX.Element {\r\n  const pathName = info.location.pathname.substr(1);\r\n  const classes = useStyles();\r\n  const [toggle, setToggle] = useState(false);\r\n  const data = makeGraph('normal');\r\n  const [graphNodes, setGraphNodes] = useState<Node[]>(data[0]);\r\n  const [graphLines, setGraphLines] = useState<Map<string, Line>>(data[1]);\r\n  const [list, setList] = useState<number[]>([]);\r\n\r\n  if (graphNodes !== undefined) {\r\n    if (initialization) {\r\n      wholeSearchProcess = search(graphNodes, pathName);\r\n      console.log(wholeSearchProcess);\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n  }\r\n\r\n  const [nowDepth, setNowDepth] = useState<number>(0);\r\n  const [nowPlaying, setNowPlaying] = useState<boolean>(playing);\r\n  // 소팅 알고리즘의 모든 상태를 순서대로 기억하는 배열 [앞으로, 뒤로, 멈춤, 재생]을 가능하게 해주는 놈.\r\n  function setDepth(depth: number): void {\r\n    if (depth <= processLength - 1) {\r\n      setNowDepth(depth);\r\n    }\r\n  }\r\n  // 소팅 알고리즘의 특정 부분으로 이동해주는 함수.\r\n  function goTo(depth: number): void {\r\n    initialization = false;\r\n    // stop이 눌러졌는지 확인.\r\n    if (playing) {\r\n      // 상태기억 배열의 길이를 벗어하는 depth가 들어왔는지 확인.\r\n      if (depth < processLength && depth > -1) {\r\n        // 현재 depth 저장.\r\n        setDepth(depth);\r\n        const temp = rendering(graphNodes, graphLines, wholeSearchProcess[depth]);\r\n        setGraphNodes(temp[0]);\r\n        setGraphLines((temp[1]));\r\n        setList(wholeSearchProcess[depth].list);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 랜덤 번호 생성 함수. 처음 렌더링 할때 과정을 함수에 저장함.\r\n  function makeRandomNumber(density = 'normal'): void {\r\n    const temp = makeGraph(density);\r\n    setGraphNodes(temp[0]);\r\n    setGraphLines(temp[1]);\r\n    setDepth(0);\r\n    initialization = true;\r\n  }\r\n\r\n  // 멈추는 함수.\r\n  function stop(): void {\r\n    playing = false;\r\n    setNowPlaying(playing);\r\n    initialization = false;\r\n  }\r\n\r\n  // 멈춤 flag를 해제하는 함수.(진행하는 함수 아니고 멈춤을 해제하는거임)\r\n  function play(): void {\r\n    if (processLength === undefined) {\r\n      wholeSearchProcess = search(graphNodes, 'bfs');\r\n      processLength = wholeSearchProcess.length;\r\n    }\r\n    playing = true;\r\n    setNowPlaying(playing);\r\n  }\r\n  // 재귀를 이용해 goTo()함수를 연속적으로 호출하는 함수.\r\n  const flow = (depth: number): void => {\r\n    // stop 버튼이 눌러지면 정지.\r\n    if (playing) {\r\n      goTo(depth);\r\n      // 끝났는지 체크.\r\n      if (depth < processLength - 1) {\r\n        // setTimeout()을 전역변수 speed 만큼 걸고 재귀적으로 flow함수를 호출.\r\n        setTimeout(() => {\r\n          flow(depth + 1);\r\n        }, speed);\r\n      } else {\r\n        // 끝났으면 멈춤 플래그 설정.\r\n        stop();\r\n      }\r\n    }\r\n  };\r\n  // 다른 화면으로 넘어갈 때는 초기화\r\n  if (!playing) {\r\n    initialization = true;\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '700px',\r\n      }}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        {/* 이동에 관한 함수는 stop상태에서만 조작할 수 있음 == (if (!playing)) */}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!playing) { play(); goTo(0); stop(); initialization = true; } }}>시작으로 가기</Button>\r\n        <IconButton aria-label=\"skipPrevious\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth - 1); stop(); } }}>\r\n          <SkipPreviousIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"playAndPause\" onClick={(): void => { if (!playing) { play(); flow(nowDepth); initialization = true; } else { stop(); initialization = true; } }}>\r\n          {(!nowPlaying || initialization)\r\n            && <PlayArrowIcon />}\r\n          {(nowPlaying && !initialization)\r\n            && <PauseIcon />}\r\n        </IconButton>\r\n        <IconButton aria-label=\"skipNext\" onClick={(): void => { if (!playing) { play(); goTo(nowDepth + 1); stop(); } }}>\r\n          <SkipNextIcon />\r\n        </IconButton>\r\n        {!toggle && <Button className={classes.button} size=\"medium\" onClick={(): void => { if (!toggle) { setToggle(true); } else { setToggle(false); } }}>그래프생성</Button>}\r\n        {toggle\r\n          && (\r\n            <div>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('low'); stop(); }}>듬성하게</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('normal'); stop(); }}>중간</Button>\r\n              <Button className={classes.button} color=\"primary\" size=\"medium\" onClick={(): void => { makeRandomNumber('high'); stop(); }}>촘촘하게</Button>\r\n            </div>\r\n          )}\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed < 2000) { speed += 100; } }}>느리게</Button>\r\n        <Button className={classes.button} size=\"medium\" onClick={(): void => { if (speed > 100) { speed -= 100; } }}>빠르게</Button>\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n      >\r\n        <GraphNodes\r\n          graphNodes={graphNodes}\r\n          graphLines={Array.from(graphLines.values())}\r\n          list={list}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GraphView;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Main from '../Main';\r\nimport SortView from '../Component/Sort/SortView';\r\nimport HSort from '../Component/Sort/HeapSort';\r\nimport GraphView from '../Component/Graph/GraphView';\r\n\r\nfunction Routes(): JSX.Element {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route path=\"/BSort\" component={SortView} />\r\n        <Route path=\"/ISort\" component={SortView} />\r\n        <Route path=\"/SSort\" component={SortView} />\r\n        <Route path=\"/MSort\" component={SortView} />\r\n        <Route path=\"/QSort\" component={SortView} />\r\n        <Route path=\"/HSort\" component={HSort} />\r\n        <Route path=\"/bfs\" component={GraphView} />\r\n        <Route path=\"/dfs\" component={GraphView} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Footer from './Footer';\r\nimport Routes from './Router/Routes';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <Routes />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config): void {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config): void{\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      registration.onupdatefound = (): void => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && !contentType.includes('javascript'))\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister(): void {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}